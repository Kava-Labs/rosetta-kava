// Code generated by mockery v2.12.3. DO NOT EDIT.

package services

import (
	context "context"

	authtypes "github.com/cosmos/cosmos-sdk/x/auth/types"

	mock "github.com/stretchr/testify/mock"

	rosetta_sdk_gotypes "github.com/coinbase/rosetta-sdk-go/types"

	signing "github.com/cosmos/cosmos-sdk/x/auth/signing"

	types "github.com/cosmos/cosmos-sdk/types"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Account provides a mock function with given fields: _a0, _a1
func (_m *Client) Account(_a0 context.Context, _a1 types.AccAddress) (authtypes.AccountI, error) {
	ret := _m.Called(_a0, _a1)

	var r0 authtypes.AccountI
	if rf, ok := ret.Get(0).(func(context.Context, types.AccAddress) authtypes.AccountI); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(authtypes.AccountI)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.AccAddress) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Balance provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Client) Balance(_a0 context.Context, _a1 *rosetta_sdk_gotypes.AccountIdentifier, _a2 *rosetta_sdk_gotypes.PartialBlockIdentifier, _a3 []*rosetta_sdk_gotypes.Currency) (*rosetta_sdk_gotypes.AccountBalanceResponse, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *rosetta_sdk_gotypes.AccountBalanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *rosetta_sdk_gotypes.AccountIdentifier, *rosetta_sdk_gotypes.PartialBlockIdentifier, []*rosetta_sdk_gotypes.Currency) *rosetta_sdk_gotypes.AccountBalanceResponse); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rosetta_sdk_gotypes.AccountBalanceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *rosetta_sdk_gotypes.AccountIdentifier, *rosetta_sdk_gotypes.PartialBlockIdentifier, []*rosetta_sdk_gotypes.Currency) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Block provides a mock function with given fields: _a0, _a1
func (_m *Client) Block(_a0 context.Context, _a1 *rosetta_sdk_gotypes.PartialBlockIdentifier) (*rosetta_sdk_gotypes.BlockResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *rosetta_sdk_gotypes.BlockResponse
	if rf, ok := ret.Get(0).(func(context.Context, *rosetta_sdk_gotypes.PartialBlockIdentifier) *rosetta_sdk_gotypes.BlockResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rosetta_sdk_gotypes.BlockResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *rosetta_sdk_gotypes.PartialBlockIdentifier) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EstimateGas provides a mock function with given fields: _a0, _a1, _a2
func (_m *Client) EstimateGas(_a0 context.Context, _a1 signing.Tx, _a2 float64) (uint64, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(context.Context, signing.Tx, float64) uint64); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, signing.Tx, float64) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostTx provides a mock function with given fields: ctx, txBytes
func (_m *Client) PostTx(ctx context.Context, txBytes []byte) (*rosetta_sdk_gotypes.TransactionIdentifier, error) {
	ret := _m.Called(ctx, txBytes)

	var r0 *rosetta_sdk_gotypes.TransactionIdentifier
	if rf, ok := ret.Get(0).(func(context.Context, []byte) *rosetta_sdk_gotypes.TransactionIdentifier); ok {
		r0 = rf(ctx, txBytes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rosetta_sdk_gotypes.TransactionIdentifier)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctx, txBytes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Status provides a mock function with given fields: _a0
func (_m *Client) Status(_a0 context.Context) (*rosetta_sdk_gotypes.BlockIdentifier, int64, *rosetta_sdk_gotypes.BlockIdentifier, *rosetta_sdk_gotypes.SyncStatus, []*rosetta_sdk_gotypes.Peer, error) {
	ret := _m.Called(_a0)

	var r0 *rosetta_sdk_gotypes.BlockIdentifier
	if rf, ok := ret.Get(0).(func(context.Context) *rosetta_sdk_gotypes.BlockIdentifier); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rosetta_sdk_gotypes.BlockIdentifier)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(context.Context) int64); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 *rosetta_sdk_gotypes.BlockIdentifier
	if rf, ok := ret.Get(2).(func(context.Context) *rosetta_sdk_gotypes.BlockIdentifier); ok {
		r2 = rf(_a0)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*rosetta_sdk_gotypes.BlockIdentifier)
		}
	}

	var r3 *rosetta_sdk_gotypes.SyncStatus
	if rf, ok := ret.Get(3).(func(context.Context) *rosetta_sdk_gotypes.SyncStatus); ok {
		r3 = rf(_a0)
	} else {
		if ret.Get(3) != nil {
			r3 = ret.Get(3).(*rosetta_sdk_gotypes.SyncStatus)
		}
	}

	var r4 []*rosetta_sdk_gotypes.Peer
	if rf, ok := ret.Get(4).(func(context.Context) []*rosetta_sdk_gotypes.Peer); ok {
		r4 = rf(_a0)
	} else {
		if ret.Get(4) != nil {
			r4 = ret.Get(4).([]*rosetta_sdk_gotypes.Peer)
		}
	}

	var r5 error
	if rf, ok := ret.Get(5).(func(context.Context) error); ok {
		r5 = rf(_a0)
	} else {
		r5 = ret.Error(5)
	}

	return r0, r1, r2, r3, r4, r5
}

type NewClientT interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t NewClientT) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

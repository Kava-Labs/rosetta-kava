// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	cosmos_sdktypes "github.com/cosmos/cosmos-sdk/types"

	mock "github.com/stretchr/testify/mock"

	types "github.com/coinbase/rosetta-sdk-go/types"
)

// AccountBalanceService is an autogenerated mock type for the AccountBalanceService type
type AccountBalanceService struct {
	mock.Mock
}

// GetCoinsAndSequenceForSubAccount provides a mock function with given fields: ctx, subAccount
func (_m *AccountBalanceService) GetCoinsAndSequenceForSubAccount(ctx context.Context, subAccount *types.SubAccountIdentifier) (cosmos_sdktypes.Coins, uint64, error) {
	ret := _m.Called(ctx, subAccount)

	if len(ret) == 0 {
		panic("no return value specified for GetCoinsAndSequenceForSubAccount")
	}

	var r0 cosmos_sdktypes.Coins
	var r1 uint64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.SubAccountIdentifier) (cosmos_sdktypes.Coins, uint64, error)); ok {
		return rf(ctx, subAccount)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.SubAccountIdentifier) cosmos_sdktypes.Coins); ok {
		r0 = rf(ctx, subAccount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cosmos_sdktypes.Coins)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.SubAccountIdentifier) uint64); ok {
		r1 = rf(ctx, subAccount)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *types.SubAccountIdentifier) error); ok {
		r2 = rf(ctx, subAccount)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewAccountBalanceService creates a new instance of AccountBalanceService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountBalanceService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountBalanceService {
	mock := &AccountBalanceService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
